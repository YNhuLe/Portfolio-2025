[
  {
    "id": "4",
    "title": "Blogs-Life",
    "slug": "bloglife-web",
    "concept": "Blogs-Life â€” a chill space to share your thoughts, ideas, and stories. From tech to daily vibes, whateverâ€™s on your mind, this is your place to be heard.ðŸ’¬",
    "tech_stack": ["Python", "Flask", "PostgreSQL", "APIs", "Docker"],
    "img_url": "/images/blogs.png",
    "git_url": "https://github.com/YNhuLe/Blogging_Life_Out",
    "description": "Blogs-Life is a laid-back blogging platform where users can freely share thoughts, ideas, and storiesâ€”whether it's tech talk or everyday vibes. It's a space built for expression and connection. ðŸ’¬\nPowered by Python, Flask, PostgreSQL, RESTful APIs, and Docker, the platform is designed for simplicity, scalability, and smooth content sharing.",
    "info": [
      {
        "title": "Challenges.",
        "content": "Challenge: While integrating Bootstrap 5.3.3 into my Flask app, I encountered layout and component issues caused by an outdated or incompatible version of Flask-Bootstrap. Components like the navbar and modals didnâ€™t behave as expected, and newer utility classes were ineffective. This slowed UI development and caused inconsistencies across devices.",
        "image": "/images/tralli_issue.png"
      },
      {
        "title": "Solution & Implementations.",
        "content": "Solution: I identified that the installed Flask-Bootstrap package was not fully compatible with Bootstrap 5.3.3. To fix this, I uninstalled the outdated package and installed the correct `flask-bootstrap5` library. This restored support for the full range of Bootstrap 5 components. I then updated templates to reflect the proper markup and ensured clean integration with Bootstrap 5â€™s JavaScript modules.",
        "image": "/images/tralli_solution.png"
      },
      {
        "title": "Results & Impacts.",
        "content": "Result: After switching to the correct version of Flask-Bootstrap, the UI rendered correctly, and all layout components worked smoothly. This reduced development friction, improved responsiveness, and ensured a consistent user experience across browsers and devices.",
        "image": "/images/tralli_result.png"
      },
      {
        "title": "ðŸš€ Future Improvements.",
        "content": "âœ… Plan: To future-proof the frontend, decouple Bootstrap integration entirely from Flask templating.\nâœ… Control Bootstrap via CDN or bundlers like Vite or Webpack.\nâœ… Lay the groundwork for integrating modern component libraries like Tailwind or React-based UIs.\nâœ… Add a dedicated user profile page to personalize the user experience.\nâœ… Enable real-time commenting functionality to boost user engagement and interaction.",
        "image": "/images/tralli_future.png"
      }
    ],
    "screenshots": ["tralli-dashboard.png", "tralli-ai-subtasks.png"],
    "video_demo": {
      "url": "",
      "caption": ""
    }
  },

  {
    "id": "4",
    "title": "TaskBloom",
    "slug": "taskbloom-web",
    "concept": "TaskBloom is a smart to-do app that uses AI to break tasks into actionable subtasks â€” helping you stay organized, focused, and productive.",
    "tech_stack": ["React", "Express", "SCSS", "Gemini API", "REST API"],
    "img_url": "/images/taskbloom.png",
    "git_url": "https://github.com/YNhuLe/Industry-Project-Team3-Server",
    "description": "TaskBloom is an intelligent to-do application designed to enhance productivity by leveraging AI to automatically break down complex tasks into manageable, actionable subtasks. This helps users stay organized, maintain focus, and achieve goals more efficiently. With an intuitive interface and smart task management features, TaskBloom supports daily planning and prioritization to keep users on track.\nThe app is built using React for a dynamic frontend, Express for backend services, styled with SCSS, and integrates the powerful Gemini API to deliver AI-driven task breakdowns. A custom REST API handles data communication, ensuring a smooth and responsive user experience.",
    "info": [
      {
        "title": "Challenges.",
        "content": "Challenge: Manual deployments slowed growth: 80% faster, reliable releasesChallenge: Manual deployments slowed growth: 80% faster, reliable releases",
        "image": "/images/zodiac.png"
      },
      {
        "title": "Solution & Implementations.",
        "content": "Challenge: Manual deployments slowed growth: 80% faster, reliable releases",
        "image": "/images/zodiac.png"
      },
      {
        "title": "Results & Impacts.",
        "content": "Challenge: Manual deployments slowed growth: 80% faster, reliable releases",
        "image": "/images/zodiac.png"
      },
      {
        "title": "ðŸš€ Future Improvements.",
        "content": "âœ… Plan: To elevate platform engagement and support scalability, several enhancements will be introduced.\nâœ… Users will be able to favorite preferred providers for faster access.\nâœ… A direct messaging feature will allow real-time communication with service providers.\nâœ… An AI-powered chatbot will assist users with common questions, service recommendations, and booking guidance 24/7.\nâœ… The chatbot will leverage user and provider data to offer personalized, context-aware support.\nâœ… A dedicated user profile page will allow users to manage preferences, bookings, and history.\nâœ… Real-time commenting functionality will enable users to engage with content and services more interactively.\nâœ… These features will reduce manual intervention and improve both onboarding and long-term retention.",
        "image": "/images/tralli_future.png"
      }
    ],
    "video_demo": {
      "url": "https://github.com/YNhuLe/tralli_server/blob/main/README.md"
    }
  }
]
